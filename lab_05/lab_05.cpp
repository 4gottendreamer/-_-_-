// lab_05.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//
// Вариант №6.
// Даны натуральное число n, действительные числа а1,..., an.
// Вычислить обратную величину произведения тех членов
// последовательности a1,..., an, для которых выполняется условие i + 1 < a_i < i!
//

#define _USE_MATH_DEFINES
#define DIVISOR 1000
#include <iostream>
#include <ctime>
#include <cmath>

using namespace std;

// Возвращает факториал числа _N
// Итерационный алгорим
long long factorial(long int _N)
{
    long long fact = 1;
    for (int i = 1; i <= _N; i++)
    {
        fact *= i;
    }
    return fact;
}

// Возвращает факториал числа _N
// Рекурсивный алгорим
long long factorial_recursive(long int _N)
{
    if (_N)
    {
        return _N * factorial_recursive(_N - 1);
    }
    else return 1;
}

int main()
{
    setlocale(LC_ALL, "Russian"); // Установка корректного вывода кириллицы
    srand(time(NULL)); // Установка генератора случайных чисел

    int N;
    double* a;
    double random;

    cout << "Введите количество элементов массива:" << endl;
    // !!! ---> При N > 20 значение факториала вызывает переполнение __int64 <--- !!!
    cin >> N;
    a = new double[N]; // Выделение память под массив
    
    cout.precision(15);
    
    // Заполнение массива псевослучайной последовательностю чисел
    for (int i = 0; i < N; i++)
    {
        random = pow(-1, i) * M_PI;
        a[i] = (rand() % DIVISOR) / random;
        printf("%2d\t%1.8lf\t%1.8lf\n",i + 1, a[i], random);
    }

    cout << endl << "i + 1 < a_i < i!" << endl;
    bool IsAnyFits = 0;

    // Проверка условий задачи
    for (int i = 0; i < N; i++)
    {
        __int64 F = factorial_recursive(i + 1);
        if (i + 2 < a[i] and a[i] < F)
        {
            IsAnyFits = true;
            printf("%2d\t< %.8lf\t< %lld\n", i + 1, 1. / a[i], F);
        }
    }
    
    for (int i = 0; i < N; i++)
        cout << i + 1 << '\t' << factorial_recursive(i + 1) << "\t\t" << factorial(i + 1) << endl;

    if (!IsAnyFits)
        cout << "Нет чисел, удовлетворяющих условию" << endl;

    // Игнорирование символа '\n' в потоке ввода
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    //cin.get(); // Ожидание нажатия Enter
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
