// lab_05.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//
// Вариант №6.
// Даны натуральное число n, действительные числа а1,..., an.
// Вычислить обратную величину произведения тех членов последовательности a1,..., an,
// для которых выполняется условие i + 1 < a_i < i!
//

#define _USE_MATH_DEFINES   // Директива использования встроенных математических констант
#define DIVISOR 1000        // Макрос подстановки токена
                            // (для настройки генератора псевдослучаных чисел)
#include <iostream>
#include <ctime>
#include <cmath>

using namespace std;

// Возвращает факториал числа _N
// Итерационный алгорим
// !!! При N > 20 значение факториала вызывает переполнение unsigned __int64 !!!
unsigned long long factorial(long int _N)
{
    unsigned long long fact = 1;
    for (int i = 1; i <= _N; i++)
    {
        fact *= i;
    }
    return fact;
}

// Возвращает факториал числа _N
// Рекурсивный алгорим
// !!! При N > 20 значение факториала вызывает переполнение unsigned __int64 !!!
unsigned long long factorial_recursive(unsigned long int _N)
{
    if (_N)
    {
        return _N * factorial_recursive(_N - 1);
    }
    else return 1;
}

int main()
{
    setlocale(LC_ALL, "Russian"); // Установка корректного вывода кириллицы
    srand(time(NULL)); // Установка генератора случайных чисел

    int N;
    double* a;
    double random;

    cout << "Введите количество элементов массива:\n" <<
        "Внимание! При значениях больше 20 вычисление факториала вызывает "
        "переполнение типа unsigned __int64." << endl;

    cin >> N;
    a = new double[N]; // Выделение памяти под массив

    // Заполнение массива псевдослучайной последовательностю чисел
    // и вывод значений элементов в консоль
    cout << "Последовательность псевдослучаных чисел:" << endl;
    for (int i = 0; i < N; i++)
    {
        random = pow(-1, i) * M_PI;
        a[i] = (rand() % DIVISOR) / random;
        printf("%2d\t%16.8lf\n", i + 1, a[i]);
    }

    cout << endl << "\nПроверка условия\ni + 1 < a_i < i!" << endl;

    bool IsAnyFits = 0; // Флаг проверки выполнения условия

    // Проверка условий задачи
    for (int i = 0; i < N; i++)
    {
        unsigned __int64 F = factorial_recursive(i + 1);
        if (i + 2 < a[i] and a[i] < F)
        {
            IsAnyFits = true; // Если условие выполняется хотя бы раз, "поднимаем" флаг
            printf("%2d\t< %16.8lf\t< %21lld\n", i + 2, a[i], F);
            printf("1/a_%2d =\t%10.8lf\n\n", i + 1, 1. / a[i]);
        }
    }

    delete []a; // Удаление выделенной под массив памяти

    // Если условие не выполнилось ни разу, сообщить об этом
    if (!IsAnyFits)
        cout << "Нет чисел, удовлетворяющих условию" << endl;

    /*
    for (int i = 0; i < N; i++) {
        unsigned __int64 F = factorial(i + 1);
        printf("%2d\t< %40lld\n", i + 1, F);
    }*/

    // Игнорирование символа '\n' в потоке ввода
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    cout << "Нажмите Enter";
    cin.get(); // Ожидание нажатия Enter

    return 0;
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
